#!/usr/bin/env python3
"""
EG-QGEM Advanced GUI Launch Script
=================================

This script launches the enhanced GUI interface with fallback support
for missing dependencies.
"""

import sys
import os
import warnings

# Suppress matplotlib warnings in GUI context
warnings.filterwarnings('ignore', category=UserWarning, module='matplotlib')

def check_dependencies():
    """Check for required dependencies."""
    missing_deps = []

    try:
        import PyQt5
    except ImportError:
        missing_deps.append("PyQt5")

    try:
        import numpy
    except ImportError:
        missing_deps.append("numpy")

    try:
        import matplotlib
    except ImportError:
        missing_deps.append("matplotlib")

    try:
        import plotly
    except ImportError:
        missing_deps.append("plotly")

    try:
        import psutil
    except ImportError:
        missing_deps.append("psutil")

    return missing_deps

def launch_advanced_gui():
    """Launch the advanced EG-QGEM GUI interface."""
    print("üöÄ EG-QGEM Advanced Research Interface")
    print("=" * 50)

    # Check dependencies
    missing = check_dependencies()
    if missing:
        print(f"‚ùå Missing dependencies: {', '.join(missing)}")
        print("\nInstall missing dependencies with:")
        for dep in missing:
            print(f"   pip install {dep}")
        return False

    # Check for display
    has_display = True
    try:
        import tkinter
        root = tkinter.Tk()
        root.destroy()
    except:
        has_display = False
        print("‚ö†Ô∏è  No display detected - running in validation mode")
        os.environ['QT_QPA_PLATFORM'] = 'offscreen'    try:
        # Import PyQt5 first
        from PyQt5.QtWidgets import QApplication
        from PyQt5.QtCore import Qt, QCoreApplication

        # Set WebEngine attribute before creating QApplication
        QCoreApplication.setAttribute(Qt.AA_ShareOpenGLContexts)

        print("‚úÖ PyQt5 imported successfully")

        # Create application
        app = QApplication(sys.argv)
        app.setApplicationName("EG-QGEM Advanced Research Interface")
        print("‚úÖ QApplication created")

        # Try to import the advanced GUI
        try:
            from advanced_gui_interface import AdvancedEGQGEMMainWindow
            print("‚úÖ Advanced GUI modules imported")

            # Create main window
            window = AdvancedEGQGEMMainWindow()
            print("‚úÖ Advanced main window created")

            if has_display and os.environ.get('QT_QPA_PLATFORM') != 'offscreen':
                print("üéâ Launching advanced GUI interface...")
                window.show()
                return app.exec_()
            else:
                print("‚úÖ Advanced GUI interface validated successfully!")
                print("\nüéØ Enhanced features available:")
                print("   ‚Ä¢ Dockable interface with multiple panels ‚úì")
                print("   ‚Ä¢ Advanced 3D visualization ‚úì")
                print("   ‚Ä¢ Real-time performance monitoring ‚úì")
                print("   ‚Ä¢ Parameter sweep capabilities ‚úì")
                print("   ‚Ä¢ Batch processing support ‚úì")
                print("   ‚Ä¢ Interactive Plotly integration ‚úì")
                print("   ‚Ä¢ Multiple themes and customization ‚úì")
                print("   ‚Ä¢ Enhanced data analysis tools ‚úì")
                return True

        except Exception as e:
            print(f"‚ö†Ô∏è  Advanced GUI failed, falling back to basic GUI: {e}")

            # Fallback to basic GUI
            from gui_interface import EGQGEMMainWindow
            print("‚úÖ Basic GUI loaded as fallback")

            window = EGQGEMMainWindow()
            if has_display and os.environ.get('QT_QPA_PLATFORM') != 'offscreen':
                window.show()
                return app.exec_()
            else:
                print("‚úÖ Basic GUI interface validated successfully!")
                return True

    except Exception as e:
        print(f"‚ùå Failed to launch GUI: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Main entry point."""
    try:
        result = launch_advanced_gui()
        if result:
            print("\n‚úÖ EG-QGEM GUI interface ready!")
        else:
            print("\n‚ùå Failed to launch GUI interface")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\nüëã GUI interface closed by user")
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
